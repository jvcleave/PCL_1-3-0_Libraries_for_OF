// define inputs from application
struct vertin
{
  float4 Position : POSITION;
  float4 Color    : COLOR0;
  float3 Normal   : NORMAL;
};

// define outputs from vertex shader
struct vertout
{
  float4 HPosition : POSITION;
  float4 Color    : COLOR0;
};

vertout main(vertin IN, 
  uniform float4x4 ModelViewProj,
  uniform float4x4 ModelViewIT,
  uniform float Rate,
  uniform float Ka,
  uniform float3 AmbientColor,
  uniform float Kd,
  uniform float3 DiffuseColor,
  uniform float Ks,
  uniform float Ksp,
  uniform float3 SpecularColor,

  uniform float3 lightPosition,
  uniform float3 eyePosition,
  uniform float3 lightDiffuseColor,
  uniform float3 lightAmbientColor,
  uniform float3 lightSpecularColor)
{
  vertout OUT;

  int twist = 1;
  float rate = Rate ;

  // transform vertex position into homogenous clip-space
  float4 inPosition = IN.Position;
  float3 inNormal = IN.Normal;

  float4 usedPosition;
  float3 usedNormal;

  if ( twist )
    {
    float angle = inPosition[2];

    float4 twistedPosition;
    twistedPosition[0] = cos(angle*rate) * inPosition[0] + sin(angle*rate) * inPosition[1];
    twistedPosition[1] = -sin(angle*rate) * inPosition[0] + cos(angle*rate)* inPosition[1];
    twistedPosition[2] = inPosition[2];
    twistedPosition[3] = inPosition[3];

    usedPosition = twistedPosition;

    float3 twistedNormal; 
    twistedNormal[0] = cos(angle*rate) * inNormal[0] + sin(angle*rate) * inNormal[1];
    twistedNormal[1] = -sin(angle*rate) * inNormal[0] + cos(angle*rate)* inNormal[1];
    twistedNormal[2] = inNormal[2];

    usedNormal = twistedNormal;
    }
  else
    {
    usedPosition = inPosition;
    usedNormal = inNormal;
    }

  OUT.HPosition = mul(ModelViewProj, usedPosition);

  // Computer Ambient intensity.
  float3 ambient = Ka * AmbientColor * lightAmbientColor;

  // Comput Diffuse intensity.
  float3 L = normalize(lightPosition - usedPosition);
  float diffuseLight = max(dot(usedNormal.xyz, L), 0);
  float3 diffuse = Kd * DiffuseColor * lightDiffuseColor * diffuseLight;

  // Compute Specular intensity.
  float3 V = normalize(eyePosition - usedPosition);
  float3 H = normalize(L + V);
  float specularLight = pow(max(dot(usedNormal.xyz, H), 0), Ksp);
  if (diffuseLight <= 0) specularLight = 0;
  float3 specular = Ks * SpecularColor * lightSpecularColor * specularLight;

  OUT.Color.xyz = ambient + diffuse + specular;
  OUT.Color.w = 1;

  return OUT;
}
