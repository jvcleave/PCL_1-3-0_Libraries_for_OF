
struct vertin
{
  float4 Position: POSITION;
  float3 Normal: NORMAL;
};

struct vertout
{
  float4 Position : POSITION;
  float4 Color    : COLOR;
};

vertout main(vertin IN,
  uniform float4x4 ModelViewProj,
  uniform float Ka,
  uniform float3 AmbientColor,
  uniform float Kd,
  uniform float3 DiffuseColor,
  uniform float Ks,
  uniform float Ksp,
  uniform float3 SpecularColor,

  uniform float3 lightPosition,
  uniform float3 eyePosition,
  uniform float3 lightDiffuseColor,
  uniform float3 lightAmbientColor,
  uniform float3 lightSpecularColor
)
{
  float3 N = IN.Normal; //invert(IN.Normal);
  vertout OUT;
  OUT.Position = mul(ModelViewProj, IN.Position);

  // Computer Ambient intensity.
  float3 ambient = Ka * AmbientColor * lightAmbientColor;

  // Comput Diffuse intensity.
  float3 L = normalize(lightPosition - IN.Position);
  float diffuseLight = max(dot(N, L), 0);
  float3 diffuse = Kd * DiffuseColor * lightDiffuseColor * diffuseLight;

  // Compute Specular intensity.
  float3 V = normalize(eyePosition - IN.Position);
  float3 H = normalize(L + V);
  float specularLight = pow(max(dot(N, H), 0), Ksp);
  if (diffuseLight <= 0) specularLight = 0;
  float3 specular = Ks * SpecularColor * lightSpecularColor * specularLight;

  OUT.Color.xyz = ambient + diffuse + specular;
  OUT.Color.w = 1;

  return OUT;
}
  
  
