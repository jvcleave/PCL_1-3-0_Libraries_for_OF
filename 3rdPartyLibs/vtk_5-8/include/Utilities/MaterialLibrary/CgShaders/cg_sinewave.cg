/*********************************************************************NVMH3****
Path:  NVSDK\Common\media\programs
File:  cg_sinewave.cg

Copyright NVIDIA Corporation 2002
TO THE MAXIMUM EXTENT PERMITTED BY APPLICABLE LAW, THIS SOFTWARE IS PROVIDED
*AS IS* AND NVIDIA AND ITS SUPPLIERS DISCLAIM ALL WARRANTIES, EITHER EXPRESS
OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO EVENT SHALL NVIDIA OR ITS SUPPLIERS
BE LIABLE FOR ANY SPECIAL, INCIDENTAL, INDIRECT, OR CONSEQUENTIAL DAMAGES
WHATSOEVER (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS,
BUSINESS INTERRUPTION, LOSS OF BUSINESS INFORMATION, OR ANY OTHER PECUNIARY LOSS)
ARISING OUT OF THE USE OF OR INABILITY TO USE THIS SOFTWARE, EVEN IF NVIDIA HAS
BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.


Comments:

******************************************************************************/

struct appin
{   
    float4 Position     : POSITION;
};

struct vertout
{
    float4 HPosition    : POSITION;
    float4 Color0       : COLOR0;
    float4 Texture0     : TEXCOORD0;
};

vertout main(appin IN, 
             uniform float4x4 ModelViewProj,    // Modelview-projection matrix
             uniform float4x4 ModelView,        // Modelview matrix
             uniform float4x4 ModelViewIT,      // Inverse transpose modelview matrix
             uniform float SinTime,
             uniform float ShowNormals)
{
    vertout OUT;

    float4 pos = float4(IN.Position.x, IN.Position.y, 0.0, 0.0);
    float distance = 1/rsqrt(dot(pos, pos));

    float cosVal;
    float sinVal;
    sincos(distance * SinTime, sinVal, cosVal);

    OUT.HPosition = mul(ModelViewProj, float4(IN.Position.x, 
                                              IN.Position.y,
                                              (sinVal * 0.06),
                                              IN.Position.w));

    // Calculate vertex normal
    float4 normal;
    normal.x = (IN.Position.x / distance) * cosVal;
    normal.y = (IN.Position.y / distance) * cosVal;
    normal.z = 1.0; normal.w = 1.0;

    // transform normal from model-space to view-space
    normal = normalize(mul(ModelViewIT, normal).xyz).xyzz;

    // Output vertex color
    if (ShowNormals == 1.0)
        OUT.Color0 = normal;
    else
        OUT.Color0 = float4(1.0, 1.0, 1.0, 1.0);

    float4 eye = normalize(mul(ModelView, IN.Position));
    
    // Compute reflection vector for look up into cube map
    float4 texCoord = eye - 2 * dot(eye, normal) * normal;
    OUT.Texture0 = texCoord;
    OUT.Texture0.w = 1.0;

    return OUT;
}
