// Rendering variables
//
// V - unit vector in direction of viewer
// L - unit vector in direction of light source
// H - unit vector that bisects V and L
// N - unit vector in normal direction
//
// theta - angle between H and V or H and L
// alpha - angle betwee N and H



// don't reference TEXCOORD0, it's and alias for POSITION
void fragment_program( in float4 pos    : POSITION,
                       in float4 normal : TEXCOORD1,
                       in float4 col    : COLOR0,
                       out float4 color  : COLOR,

                       uniform float  testFloat,
                       uniform float1 testFloat1,
                       uniform float2 testFloat2,
                       uniform float3 testFloat3,
                       uniform float4 testFloat4,

                       // when these parameters are declared as doubleN
                       // an error is generated when the application
                       // tries to set their value.
                       uniform float testDouble,
                       uniform float1 testDouble1,
                       uniform float2 testDouble2,
                       uniform float3 testDouble3,
                       uniform float4 testDouble4,

                       uniform float3 lightFocalPoint,
                       uniform float3 lightPosition,

                       uniform float3 cameraFocalPoint,
                       uniform float3 cameraPosition

                     )
{
  float3 lightVec = lightFocalPoint - lightPosition;
  float3 eyeVec   = cameraFocalPoint - cameraPosition;
  float ne = dot( normal.xyz, normalize(eyeVec) );

  // Halfway Vector varies once per object
  float3 H = normalize( lightVec + eyeVec );

  float diffuse = max(0.0, dot(normalize(normal.xyz),normalize(lightVec)));



  // check Vector inputs, object is red upon error conditions
  if( 0
      || testFloat!=1.01
      || testFloat1.r!=1.02
      || testFloat2.r!=1.03 || testFloat2.g!=2.08
      || testFloat3.r!=1.04 || testFloat3.g!=2.07 || testFloat3.b!=3.09
      || testFloat4.r!=1.05 || testFloat4.g!=2.06 || testFloat4.b!=3.001 || testFloat4.a!=4.002

      || testDouble!=10.01
      || testDouble1.r!=10.02
      || testDouble2.r!=10.03 || testDouble2.g!=20.08
      || testDouble3.r!=10.04 || testDouble3.g!=20.07 || testDouble3.b!=30.09
      || testDouble4.r!=10.05 || testDouble4.g!=20.06 || testDouble4.b!=30.001 || testDouble4.a!=40.002
      )
    {
    color = float4( 1.0, 0.0, 0.0, 1.0 );
    }
  else
    {
    // Lambertian Shading
    //color.rgb = MyAmbient * col;
    // Phong Shading
    color = (0.5 + diffuse) * col;
    color.a = 1.0;
    }

}
