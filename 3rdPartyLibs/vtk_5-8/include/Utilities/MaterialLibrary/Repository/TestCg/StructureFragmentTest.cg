struct TestStructure
{
  uniform float f;
  uniform float1 f1;
  uniform float2 f2;
  uniform float3 f3;
  uniform float4 f4;
};

// don't reference TEXCOORD0, it's and alias for POSITION
void fragment_program( in float4 normal : TEXCOORD1,
                       in float4 col    : COLOR0,
                       out float4 color  : COLOR,

                       uniform TestStructure testStructure1,
                       uniform TestStructure testStructure2,

                       uniform float3 lightFocalPoint,
                       uniform float3 lightPosition,

                       uniform float3 cameraFocalPoint,
                       uniform float3 cameraPosition

                     )
{
  float3 lightVec = lightFocalPoint - lightPosition;
  float3 eyeVec   = cameraFocalPoint - cameraPosition;
  float ne = dot( normal.xyz, normalize(eyeVec) );

  // Halfway Vector varies once per object
  float3 H = normalize( lightVec + eyeVec );

  float diffuse = max(0.0, dot(normalize(normal.xyz),normalize(lightVec)));

  if( 0
//    || testStructure1.f != 1.0

//    || testStructure1.f1.x != 1.1

//    || testStructure1.f2.x != 1.1
//    || testStructure1.f2.y != 1.2

//    || testStructure1.f3.x != 1.1
//    || testStructure1.f3.y != 1.2
//    || testStructure1.f3.z != 1.3

//    || testStructure1.f4.x != 1.1
//    || testStructure1.f4.y != 1.2
//    || testStructure1.f4.z != 1.3
//    || testStructure1.f4.w != 1.4

    || testStructure2.f != 2.0

    || testStructure2.f1.x != 2.1

    || testStructure2.f2.x != 2.1
    || testStructure2.f2.y != 2.2

    || testStructure2.f3.x != 2.1
    || testStructure2.f3.y != 2.2
    || testStructure2.f3.z != 2.3

    || testStructure2.f4.x != 2.1
    || testStructure2.f4.y != 2.2
    || testStructure2.f4.z != 2.3
    || testStructure2.f4.w != 2.4
    )
    {
    color = float4( 1.0, 0.0, 0.0, 1.0 );
    }
  else
    {
    color = (0.5 + diffuse) * col;
    color.a = 1.0;
    }

}
